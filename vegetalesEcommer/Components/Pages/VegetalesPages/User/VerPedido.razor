@page "/Pedidos"
@using Proyecto_Final1.Data
@using Proyecto_Final1.Pedidos
@using Proyecto_Final1.Usuarios
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Mis Pedidos</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-green-50 to-green-100 flex items-start justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-4xl w-full space-y-8">
        <div class="text-center">
            <h2 class="text-3xl font-extrabold text-gray-900">Historial de Pedidos</h2>
            <p class="mt-2 text-sm text-gray-600">
                Aquí puedes ver el estado y los detalles de tus pedidos.
            </p>
        </div>

        @if (isLoading)
        {
            <div class="text-center">
                <i class="fas fa-spinner fa-spin text-4xl text-green-600"></i>
                <p class="mt-2">Cargando pedidos...</p>
            </div>
        }
        else if (pedidos == null || !pedidos.Any())
        {
            <div class="bg-white rounded-lg shadow-lg p-12 text-center">
                <i class="fas fa-box-open text-6xl text-gray-300 mb-4"></i>
                <h3 class="text-2xl font-bold text-gray-800">No tienes pedidos</h3>
                <p class="mt-2 text-gray-600">Aún no has realizado ninguna compra.</p>
                <a href="/" class="mt-4 inline-block px-6 py-2 text-white bg-green-600 rounded-md hover:bg-green-700 transition">
                    <i class="fas fa-shopping-basket mr-2"></i>Ir a la tienda
                </a>
            </div>
        }
        else
        {
            <div class="space-y-6">
                @foreach (var pedido in pedidos)
                {
                    <div class="bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition duration-300">
                        <div class="flex justify-between items-center mb-4 border-b pb-4">
                            <div>
                                <h4 class="text-xl font-semibold text-gray-800">Pedido #@pedido.PedidoId</h4>
                                <p class="text-sm text-gray-500">Fecha: @pedido.FechaPedido.ToShortDateString()</p>
                            </div>
                            <div class="text-right">
                                <p class="text-sm font-medium text-gray-600">Total</p>
                                <p class="text-lg font-bold text-green-600">@pedido.Total.ToString("C")</p>
                            </div>
                        </div>

                        <div class="flex justify-between items-center">
                            <div>
                                <span class="text-sm font-medium text-gray-600">Estado:</span>
                                <span class="ml-2 font-bold @(pedido.Estado == "Completado" ? "text-green-500" : "text-yellow-500")">
                                    @pedido.Estado
                                </span>
                            </div>
                            <button @onclick="() => NavigateToOrderDetail(pedido.PedidoId)"
                                    class="px-4 py-2 text-sm font-medium text-white bg-green-500 rounded-md hover:bg-green-600 transition">
                                Ver Detalles
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<Pedido>? pedidos;
    private ApplicationUser? currentUser;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUser = await UserManager.GetUserAsync(authState.User);

        if (currentUser != null)
        {
            await LoadPedidos();
        }

        isLoading = false;
    }

    private async Task LoadPedidos()
    {
        if (currentUser != null)
        {
            pedidos = await DbContext.Set<Pedido>()
                .Where(p => p.UsuarioId == currentUser.Id)
                .OrderByDescending(p => p.FechaPedido)
                .ToListAsync();
        }
    }

    private void NavigateToOrderDetail(int pedidoId)
    {
        // Reemplaza "/VerDetallePedido" con la ruta de tu componente de detalles de pedido
        NavigationManager.NavigateTo($"/VerDetallePedido/{pedidoId}");
    }
}