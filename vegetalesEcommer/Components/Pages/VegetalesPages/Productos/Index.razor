@page "/Productos"
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using Proyecto_Final1.Data 
@using Proyecto_Final1.Productos 
@using Proyecto_Final1.Services 
@using Microsoft.EntityFrameworkCore 
@using Microsoft.AspNetCore.Authorization 
@inject NavigationManager NavigationManager
@inject CartService CartService
@inject ApplicationDbContext DbContext // Inyectamos el DbContext
@inject ILogger<Index> Logger 
@implements IDisposable

<PageTitle>Nuestros Productos - Mercado Orgánico</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-green-50 to-green-100 flex flex-col items-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-12">
        <div class="flex justify-center items-center space-x-2 mb-4">
            <i class="fas fa-leaf text-4xl text-green-600"></i>
            <span class="text-2xl font-bold text-green-700">Mercado Orgánico</span>
        </div>
        <h2 class="text-3xl font-extrabold text-gray-900">Productos Frescos de Temporada</h2>
        <p class="mt-2 text-sm text-gray-600">
            Descubre nuestra selección de productos orgánicos y de alta calidad.
        </p>
    </div>

    @if (!string.IsNullOrEmpty(addToCartMessage))
    {
        <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-6 rounded-md shadow-md max-w-xl w-full text-center" role="alert">
            <p class="font-bold">¡Éxito!</p>
            <p>@addToCartMessage</p>
        </div>
    }

    <div class="max-w-6xl w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
        @foreach (var product in products)
        {
            <div class="bg-white rounded-lg shadow-lg overflow-hidden transform transition-transform duration-300 hover:scale-105 hover:shadow-2xl flex flex-col">
                <div class="relative">
                    <img src="@product.ImagenUrl" alt="@product.Nombre" class="w-full h-48 object-cover" />
                    <span class="absolute top-2 right-2 bg-green-600 text-white text-xs font-bold px-2 py-1 rounded-full">@product.Precio.ToString("C")</span>

                    
                    <AuthorizeView Roles="Admin">
                        <Authorized>
                            <button @onclick="() => NavigateToEditProduct(product.ProductoId)"
                                    class="absolute top-2 left-2 p-2 bg-blue-600 text-white rounded-full shadow-md hover:bg-blue-700 transition"
                                    title="Editar Producto">
                                <i class="fas fa-edit text-lg"></i> 
                            </button>
                        </Authorized>
                    </AuthorizeView>
                </div>

                <div class="p-6 flex flex-col flex-grow">
                    <h3 class="text-lg font-bold text-gray-900">@product.Nombre</h3>
                    <p class="mt-2 text-sm text-gray-600 flex-grow">@product.Descripcion</p>

                    <div class="mt-4 flex items-center justify-between">
                        <div class="flex items-center space-x-2">
                            <button @onclick="() => DecreaseQuantity(product.ProductoId)"
                                    class="p-2 border border-green-300 rounded-md text-green-600 hover:bg-green-50 transition">
                                <i class="fas fa-minus text-sm"></i>
                            </button>
                            <span class="w-8 text-center font-bold text-gray-800">@GetQuantity(product.ProductoId)</span>
                            <button @onclick="() => IncreaseQuantity(product.ProductoId)"
                                    class="p-2 border border-green-300 rounded-md text-green-600 hover:bg-green-50 transition">
                                <i class="fas fa-plus text-sm"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <div class="p-6 pt-0">
                    <button @onclick="() => AddToCart(product.ProductoId)"
                            class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition duration-150 ease-in-out transform hover:scale-105">
                        <span class="absolute left-0 inset-y-0 flex items-center pl-3">
                            <i class="fas fa-cart-plus text-green-500 group-hover:text-green-400"></i>
                        </span>
                        Agregar al Carrito
                    </button>
                </div>
            </div>
        }
    </div>

    <a href="/Carrito" class="fixed bottom-8 right-8 bg-green-600 text-white p-4 rounded-full shadow-lg transform transition-transform duration-300 hover:scale-110">
        <i class="fas fa-shopping-cart text-2xl"></i>
        @if (cartCount > 0)
        {
            <span class="absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-red-100 transform translate-x-1/2 -translate-y-1/2 bg-red-600 rounded-full">@cartCount</span>
        }
    </a>
</div>

@code {
    private List<Proyecto_Final1.Productos.Producto> products = new();
    private int cartCount => CartService.GetCartCount();
    private Dictionary<int, int> quantities = new Dictionary<int, int>();
    private string? addToCartMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            products = await DbContext.Productos.ToListAsync();
            Logger.LogInformation("Productos cargados desde la base de datos. Cantidad: {Count}", products.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al cargar productos desde la base de datos.");
            
        }

        CartService.OnChange += StateHasChanged;
        foreach (var product in products)
        {
            quantities[product.ProductoId] = 1;
        }
    }

    private int GetQuantity(int productId)
    {
        return quantities.ContainsKey(productId) ? quantities[productId] : 1;
    }

    private void IncreaseQuantity(int productId)
    {
        if (quantities.ContainsKey(productId))
        {
            quantities[productId]++;
        }
        else
        {
            quantities[productId] = 1;
        }
    }

    private void DecreaseQuantity(int productId)
    {
        if (quantities.ContainsKey(productId) && quantities[productId] > 1)
        {
            quantities[productId]--;
        }
    }

    private async Task AddToCart(int productId)
    {
        var product = products.FirstOrDefault(p => p.ProductoId == productId);
        if (product != null)
        {
            int quantityToAdd = GetQuantity(productId);
            var cartItem = new CartItem
                {
                    ProductId = product.ProductoId,
                    Name = product.Nombre,
                    Price = product.Precio,
                    Quantity = quantityToAdd,
                    ImageUrl = product.ImagenUrl
                };

            CartService.AddItem(cartItem);

            addToCartMessage = $"Se agregaron {quantityToAdd} x {product.Nombre} a tu carrito.";
            StateHasChanged();

            await Task.Delay(3000);
            addToCartMessage = null;
            StateHasChanged();

            quantities[productId] = 1;
        }
    }

    private void NavigateToEditProduct(int productId)
    {
        NavigationManager.NavigateTo($"/EditarProducto/{productId}");
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
    }
}
