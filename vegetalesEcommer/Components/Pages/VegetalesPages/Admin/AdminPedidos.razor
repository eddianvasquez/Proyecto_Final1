@page "/admin/pedidos"
@using Proyecto_Final1.Pedidos
@using Proyecto_Final1.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject ApplicationDbContext Context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

@attribute [Authorize(Roles = "Admin")] 

<PageTitle>Administrar Pedidos</PageTitle>

<main class="container mx-auto px-4 py-8">
    <h1 class="text-4xl md:text-5xl font-bold text-gray-800 mb-8 text-center">Administrar Pedidos</h1>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-6 rounded-md shadow-sm" role="alert">
            <p class="font-bold">¡Éxito!</p>
            <p>@successMessage</p>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded-md shadow-sm" role="alert">
            <p class="font-bold">Error:</p>
            <p>@errorMessage</p>
        </div>
    }

    <div class="bg-white p-6 rounded-lg shadow-lg mb-8">
        <h2 class="text-2xl font-semibold text-gray-800 mb-4">Filtrar Pedidos por Fecha</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
            <div>
                <label for="filterStartDate" class="block text-sm font-medium text-gray-700">Fecha de Inicio:</label>
                <input type="date" id="filterStartDate" @bind="filterDateStart" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500" />
            </div>
            <div>
                <label for="filterEndDate" class="block text-sm font-medium text-gray-700">Fecha Fin:</label>
                <input type="date" id="filterEndDate" @bind="filterDateEnd" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500" />
            </div>
            <div class="flex space-x-2 mt-4 md:mt-0">
                <button @onclick="ApplyFilter" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md transition duration-150 ease-in-out transform hover:scale-105 flex-grow">
                    <i class="fas fa-filter mr-2"></i>Aplicar Filtro
                </button>
                <button @onclick="ClearFilter" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-md transition duration-150 ease-in-out transform hover:scale-105 flex-grow">
                    <i class="fas fa-times mr-2"></i>Limpiar Filtro
                </button>
            </div>
        </div>
    </div>

    @if (pedidos == null)
    {
        <p class="text-center text-gray-600">Cargando pedidos...</p>
    }
    else if (!pedidos.Any())
    {
        <p class="text-center text-gray-600">No hay pedidos disponibles.</p>
    }
    else
    {
        <div class="overflow-x-auto bg-white rounded-lg shadow-lg">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID Pedido</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Usuario (ID)</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha Pedido</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
                        <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var pedido in pedidos)
                    {
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@pedido.PedidoId</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                @(pedido.Usuario?.UserName ?? "Usuario Desconocido") (@pedido.UsuarioId)
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@pedido.FechaPedido.ToString("dd/MM/yyyy HH:mm")</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">$@pedido.Total.ToString("N2")</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@pedido.Estado</td>
                            <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                                <button @onclick="(() => ShowEditForm(pedido))" class="text-indigo-600 hover:text-indigo-900 mr-4">
                                    <i class="fas fa-edit"></i> Editar Estado
                                </button>
                                <button @onclick="(() => ConfirmDelete(pedido.PedidoId))" class="text-red-600 hover:text-red-900">
                                    <i class="fas fa-trash-alt"></i> Eliminar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</main>

@if (showEditModal)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-75 flex items-center justify-center z-50 p-4">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-lg p-6">
            <h3 class="text-2xl font-semibold text-gray-800 mb-6 text-center">Editar Estado del Pedido</h3>
            <EditForm Model="@pedidoToEdit" OnValidSubmit="@SavePedido">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-6">
                    <label for="editEstado" class="block text-sm font-medium text-gray-700">Estado del Pedido:</label>
                    <InputSelect id="editEstado" @bind-Value="pedidoToEdit.Estado" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500">
                        <option value="Pendiente">Pendiente</option>
                        <option value="Procesando">Procesando</option>
                        <option value="Enviado">Enviado</option>
                        <option value="Entregado">Entregado</option>
                        <option value="Cancelado">Cancelado</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => pedidoToEdit.Estado)" />
                </div>

                <div class="flex justify-end space-x-4">
                    <button type="button" @onclick="CloseEditModal" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-md transition duration-150 ease-in-out">
                        Cancelar
                    </button>
                    <button type="submit" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md transition duration-150 ease-in-out">
                        Guardar Cambios
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private List<Pedido> pedidos;
    private Pedido pedidoToEdit;
    private bool showEditModal = false;
    private DateTime? filterDateStart;
    private DateTime? filterDateEnd;
    private string successMessage;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadPedidos();
    }

    private async Task LoadPedidos()
    {
        try
        {
            IQueryable<Pedido> query = Context.Pedidos
                                            .Include(p => p.Usuario)
                                            .Include(p => p.DireccionDeEnvio) // Incluir la dirección de envío si es relevante mostrarla
                                            .OrderByDescending(p => p.FechaPedido)
                                            .AsQueryable();

            if (filterDateStart.HasValue)
            {
                query = query.Where(p => p.FechaPedido.Date >= filterDateStart.Value.Date);
            }

            if (filterDateEnd.HasValue)
            {
                query = query.Where(p => p.FechaPedido.Date <= filterDateEnd.Value.Date);
            }

            pedidos = await query.ToListAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los pedidos: {ex.Message}";
            Console.WriteLine($"Error al cargar los pedidos: {ex.Message}");
        }
    }

    private void ShowEditForm(Pedido pedido)
    {
        pedidoToEdit = pedido; // Usamos una referencia directa para editar en el modal
        showEditModal = true;
        successMessage = string.Empty; // Limpia mensajes anteriores
        errorMessage = string.Empty;
    }

    private async Task SavePedido()
    {
        if (pedidoToEdit == null) return;

        try
        {
            Context.Pedidos.Update(pedidoToEdit); // Marca la entidad como modificada
            await Context.SaveChangesAsync();
            await LoadPedidos(); // Recarga la lista para reflejar los cambios
            successMessage = "Estado del pedido actualizado exitosamente.";
            CloseEditModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar el pedido: {ex.Message}";
            Console.WriteLine($"Error al guardar el pedido: {ex.Message}");
        }
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        pedidoToEdit = null;
    }

    private async Task ConfirmDelete(int pedidoId)
    {
        bool confirmed = await Task.FromResult(
            new ConfirmDialog("Confirmar Eliminación", "¿Estás seguro de que quieres eliminar este pedido?").Show()
        );

        if (confirmed)
        {
            await DeletePedido(pedidoId);
        }
    }

    private async Task DeletePedido(int pedidoId)
    {
        try
        {
            var pedido = await Context.Pedidos.FindAsync(pedidoId);
            if (pedido != null)
            {
                Context.Pedidos.Remove(pedido); // Marca la entidad para eliminación
                await Context.SaveChangesAsync();
                await LoadPedidos(); // Recarga la lista
                successMessage = "Pedido eliminado exitosamente.";
            }
            else
            {
                errorMessage = "Pedido no encontrado.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al eliminar el pedido: {ex.Message}";
            Console.WriteLine($"Error al eliminar el pedido: {ex.Message}");
        }
    }

    private async Task ApplyFilter()
    {
        successMessage = string.Empty;
        errorMessage = string.Empty;
        await LoadPedidos();
    }

    private async Task ClearFilter()
    {
        filterDateStart = null;
        filterDateEnd = null;
        successMessage = string.Empty;
        errorMessage = string.Empty;
        await LoadPedidos();
    }

    // Clase auxiliar para un diálogo de confirmación simple (simulado aquí)
    // En una aplicación real, usarías un componente de diálogo de Blazor.
    private class ConfirmDialog
    {
        private string title;
        private string message;

        public ConfirmDialog(string title, string message)
        {
            this.title = title;
            this.message = message;
        }

        public bool Show()
        {
            // En una aplicación real, esto mostraría un modal de confirmación al usuario.
            // Para este ejemplo, simulamos una confirmación true/false.
            // Debes reemplazar esto con una implementación real de un componente modal.
            return true; // Asumimos 'Sí' para la demostración
        }
    }
}
