@page "/EditarProducto/{ProductoId:int}"

@using System.ComponentModel.DataAnnotations
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Hosting
@using Proyecto_Final1.Data
@using Proyecto_Final1.Productos
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject ILogger<EditarProducto> Logger

@inject IWebHostEnvironment WebHostEnvironment
@inject IJSRuntime JSRuntime

@inject IWebHostEnvironment WebHostEnvironment


@attribute [Authorize(Roles = "Admin")]
@if (isLoading)
{
    <div class="min-h-screen bg-gradient-to-br from-green-50 to-green-100 flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div class="text-center">
            <i class="fas fa-spinner fa-spin text-4xl text-green-600 mb-4"></i>
            <h2 class="text-xl font-bold text-gray-900">Cargando producto...</h2>
            <p class="text-sm text-gray-600">Por favor espera un momento.</p>
        </div>
    </div>
}
else if (productInput == null)
{
    <div class="min-h-screen bg-gradient-to-br from-green-50 to-green-100 flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div class="text-center">
            <i class="fas fa-exclamation-triangle text-4xl text-red-600 mb-4"></i>
            <h2 class="text-xl font-bold text-gray-900">Producto no encontrado</h2>
            <p class="text-sm text-gray-600">El producto con ID @ProductoId no existe o no pudo ser cargado.</p>
            <a href="/Productos" class="mt-4 inline-flex items-center text-sm text-gray-600 hover:text-green-600 transition">
                <i class="fas fa-arrow-left mr-2"></i> Volver a la lista de productos
            </a>
        </div>
    </div>
}
else
{
    <PageTitle>Editar Producto: @productInput.Nombre - Mercado Orgánico</PageTitle>

    <div class="min-h-screen bg-gradient-to-br from-green-50 to-green-100 flex flex-col items-center py-12 px-4 sm:px-6 lg:px-8">
        <div class="max-w-4xl w-full space-y-8">

            <div class="text-center mb-8">
                <div class="flex justify-center items-center space-x-2 mb-4">
                    <i class="fas fa-edit text-4xl text-green-600"></i>
                    <span class="text-2xl font-bold text-green-700">Mercado Orgánico</span>
                </div>
                <h1 class="text-3xl font-extrabold text-gray-900">Editar Producto: @productInput.Nombre</h1>
                <p class="mt-2 text-sm text-gray-600">
                    Modifica los detalles de este producto existente.
                </p>
            </div>

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-6 rounded-md shadow-md" role="alert">
                    <i class="fas fa-check-circle mr-2"></i>@successMessage
                </div>
            }
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded-md shadow-md" role="alert">
                    <i class="fas fa-exclamation-circle mr-2"></i>@errorMessage
                </div>
            }


            <div class="bg-white rounded-lg shadow-lg p-8">
                <EditForm Model="productInput" OnValidSubmit="HandleValidSubmit" FormName="editProduct" class="space-y-8">
                    <DataAnnotationsValidator />

                    <div>
                        <h2 class="text-xl font-semibold text-gray-900 mb-4">
                            <i class="fas fa-info-circle text-green-600 mr-2"></i>Información Básica
                        </h2>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="space-y-2">
                                <label for="productInput.Nombre" class="block text-sm font-medium text-gray-700">Nombre del Producto</label>
                                <InputText id="productInput.Nombre" @bind-Value="productInput.Nombre"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500" />
                                <ValidationMessage For="() => productInput.Nombre" class="text-red-600 text-sm" />
                            </div>
                            <div class="space-y-2">
                                <label for="productInput.Precio" class="block text-sm font-medium text-gray-700">Precio</label>
                                <InputNumber id="productInput.Precio" @bind-Value="productInput.Precio"
                                             class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500" />
                                <ValidationMessage For="() => productInput.Precio" class="text-red-600 text-sm" />
                            </div>
                            <div class="space-y-2 md:col-span-2">
                                <label for="productInput.Descripcion" class="block text-sm font-medium text-gray-700">Descripción</label>
                                <InputTextArea id="productInput.Descripcion" @bind-Value="productInput.Descripcion" rows="4"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500" />
                                <ValidationMessage For="() => productInput.Descripcion" class="text-red-600 text-sm" />
                            </div>
                            <div class="space-y-2">
                                <label for="imageUpload" class="block text-sm font-medium text-gray-700">Subir Nueva Imagen (opcional)</label>
                                <InputFile id="imageUpload" OnChange="HandleFileChange" class="w-full" />
                                @if (selectedImageFile == null && !string.IsNullOrEmpty(productInput.ImagenUrl))
                                {
                                    <p class="text-sm text-gray-500 mt-1">Imagen actual:</p>
                                    <img src="@productInput.ImagenUrl" alt="Imagen del producto actual" class="mt-2 h-24 w-24 object-cover rounded-md shadow" />
                                }
                                else if (selectedImageFile != null)
                                {
                                    <p class="text-sm text-gray-500 mt-1">Nueva imagen seleccionada: <span class="font-medium">@selectedImageFile.Name</span></p>
                                }
                                <ValidationMessage For="() => productInput.ImagenUrl" class="text-red-600 text-sm" />
                            </div>
                            <div class="space-y-2">
                                <label for="productInput.Stock" class="block text-sm font-medium text-gray-700">Stock Disponible</label>
                                <InputNumber id="productInput.Stock" @bind-Value="productInput.Stock"
                                             class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500" />
                                <ValidationMessage For="() => productInput.Stock" class="text-red-600 text-sm" />
                            </div>
                        </div>
                    </div>

                    <div>
                        <h2 class="text-xl font-semibold text-gray-900 mb-4">
                            <i class="fas fa-seedling text-green-600 mr-2"></i>Detalles de Vegetales
                        </h2>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="space-y-2">
                                <label for="productInput.Categoria" class="block text-sm font-medium text-gray-700">Categoría</label>
                                <InputText id="productInput.Categoria" @bind-Value="productInput.Categoria"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500"
                                           placeholder="Ej: Hortaliza, Fruta, Raíz" />
                                <ValidationMessage For="() => productInput.Categoria" class="text-red-600 text-sm" />
                            </div>
                            <div class="space-y-2">
                                <label for="productInput.Origen" class="block text-sm font-medium text-gray-700">Origen</label>
                                <InputText id="productInput.Origen" @bind-Value="productInput.Origen"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500"
                                           placeholder="Ej: Granja Local, Importado" />
                                <ValidationMessage For="() => productInput.Origen" class="text-red-600 text-sm" />
                            </div>
                            <div class="space-y-2">
                                <label for="productInput.UnidadDeMedida" class="block text-sm font-medium text-gray-700">Unidad de Medida</label>
                                <InputText id="productInput.UnidadDeMedida" @bind-Value="productInput.UnidadDeMedida"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500"
                                           placeholder="Ej: kg, unidad, manojo" />
                                <ValidationMessage For="() => productInput.UnidadDeMedida" class="text-red-600 text-sm" />
                            </div>
                            <div class="space-y-2">
                                <label for="productInput.Temporada" class="block text-sm font-medium text-gray-700">Temporada</label>
                                <InputText id="productInput.Temporada" @bind-Value="productInput.Temporada"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500"
                                           placeholder="Ej: Todo el año, Primavera" />
                                <ValidationMessage For="() => productInput.Temporada" class="text-red-600 text-sm" />
                            </div>
                            <div class="flex items-center mt-2 col-span-2">
                                <InputCheckbox id="productInput.EsOrganicoCertificado" @bind-Value="productInput.EsOrganicoCertificado"
                                               class="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded" />
                                <label for="productInput.EsOrganicoCertificado" class="ml-2 block text-sm font-medium text-gray-700">
                                    <i class="fas fa-award text-yellow-500 mr-1"></i>Orgánico Certificado
                                </label>
                            </div>
                        </div>
                    </div>


                    <div>
                        <h2 class="text-xl font-semibold text-gray-900 mb-4 flex items-center justify-between">
                            <span><i class="fas fa-tags text-green-600 mr-2"></i>Variaciones del Producto</span>
                            <button type="button" @onclick="AddVariation"
                                    class="px-3 py-1 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700 transition">
                                <i class="fas fa-plus mr-1"></i>Añadir Variación
                            </button>
                        </h2>

                        @if (productInput.Variaciones.Any())
                        {
                            <div class="space-y-4">
                                @foreach (var variation in productInput.Variaciones)
                                {
                                    <div class="p-4 border border-gray-200 rounded-md bg-gray-50 grid grid-cols-1 md:grid-cols-4 gap-4 items-end">
                                        <div class="space-y-2">
                                            <label for="variation.NombreVariacion" class="block text-sm font-medium text-gray-700">Nombre (ej. Tipo)</label>
                                            <InputText @bind-Value="variation.NombreVariacion"
                                                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
                                                       placeholder="Ej: Color, Madurez" />
                                        </div>
                                        <div class="space-y-2">
                                            <label for="variation.ValorVariacion" class="block text-sm font-medium text-gray-700">Valor (ej. Rojo, Verde, Maduro)</label>
                                            <InputText @bind-Value="variation.ValorVariacion"
                                                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm"
                                                       placeholder="Ej: Liso, Rizado" />
                                        </div>
                                        <div class="space-y-2">
                                            <label for="variation.PrecioAdicional" class="block text-sm font-medium text-gray-700">Precio Adicional</label>
                                            <InputNumber @bind-Value="variation.PrecioAdicional"
                                                         class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm" />
                                        </div>
                                        <div class="flex justify-end">
                                            <button type="button" @onclick="() => RemoveVariation(variation)"
                                                    class="px-3 py-2 bg-red-600 text-white text-sm rounded-md hover:bg-red-700 transition">
                                                <i class="fas fa-times mr-1"></i>Eliminar
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-gray-500 text-sm">No hay variaciones añadidas. Haz clic en "Añadir Variación" para empezar.</p>
                        }
                    </div>

                    <div>
                        <div class="flex justify-between items-center gap-4">
                            <button type="submit"
                                    class="flex-1 group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition duration-150 ease-in-out transform hover:scale-105">
                                <span class="absolute left-0 inset-y-0 flex items-center pl-3">
                                    <i class="fas fa-save text-green-500 group-hover:text-green-400"></i>
                                </span>
                                Actualizar Producto
                            </button>
                            <button type="button" @onclick="HandleDeleteProduct"
                                    class="flex-1 group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition duration-150 ease-in-out transform hover:scale-105">
                                <span class="absolute left-0 inset-y-0 flex items-center pl-3">
                                    <i class="fas fa-trash-alt text-red-500 group-hover:text-red-400"></i>
                                </span>
                                Eliminar Producto
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>

            <div class="text-center mt-8">
                <a href="/productos"
                   class="inline-flex items-center text-sm text-gray-600 hover:text-green-600 transition">
                    <i class="fas fa-arrow-left mr-2"></i>
                    Volver a la lista de productos
                </a>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int ProductoId { get; set; }

    private InputModel? productInput;
    private Proyecto_Final1.Productos.Producto? currentProduct;
    private IBrowserFile? selectedImageFile;
    private bool isLoading = true;

    private string? successMessage;
    private string? errorMessage;

    private class InputModel
    {
        [Required(ErrorMessage = "El nombre del producto es obligatorio.")]
        [StringLength(100, ErrorMessage = "El nombre no puede exceder los 100 caracteres.")]
        public string Nombre { get; set; } = string.Empty;

        [Required(ErrorMessage = "La descripcion es obligatoria.")]
        [StringLength(500, ErrorMessage = "La descripción no puede exceder los 500 caracteres.")]
        public string Descripcion { get; set; } = string.Empty;

        [Required(ErrorMessage = "El precio es obligatorio.")]
        [Range(0.01, (double)decimal.MaxValue, ErrorMessage = "El precio debe ser mayor que cero.")]
        public decimal Precio { get; set; }


        [Required(ErrorMessage = "La imagen es obligatoria.")]
        public string ImagenUrl { get; set; } = string.Empty;

        [Required(ErrorMessage = "El stock es obligatorio.")]
        [Range(0, int.MaxValue, ErrorMessage = "El stock no puede ser negativo.")]
        public int Stock { get; set; }


        [Required(ErrorMessage = "La categoría es obligatoria.")]
        public string Categoria { get; set; } = string.Empty;

        [Required(ErrorMessage = "El origen es obligatorio.")]
        public string Origen { get; set; } = string.Empty;

        [Required(ErrorMessage = "La unidad de medida es obligatoria.")]
        public string UnidadDeMedida { get; set; } = string.Empty;

        public bool EsOrganicoCertificado { get; set; }

        public string? Temporada { get; set; }

        public List<VariacionInputModel> Variaciones { get; set; } = new();
    }


    private class VariacionInputModel
    {
        public int VariacionId { get; set; }

        [Required(ErrorMessage = "El nombre de la variación es obligatorio.")]
        public string NombreVariacion { get; set; } = string.Empty;

        [Required(ErrorMessage = "El valor de la variación es obligatorio.")]
        public string ValorVariacion { get; set; } = string.Empty;

        [Range(0, double.MaxValue, ErrorMessage = "El precio adicional no puede ser negativo.")]
        public decimal PrecioAdicional { get; set; }
    }


    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            currentProduct = await DbContext.Productos
                                .Include(p => p.Variaciones)
                                .FirstOrDefaultAsync(p => p.ProductoId == ProductoId);

            if (currentProduct == null)
            {
                errorMessage = "Producto no encontrado.";
                Logger.LogWarning("Intento de editar un producto con ID {ProductoId} que no existe.", ProductoId);

            }
            else
            {
                productInput = new InputModel
                    {
                        Nombre = currentProduct.Nombre,
                        Descripcion = currentProduct.Descripcion,
                        Precio = currentProduct.Precio,
                        ImagenUrl = currentProduct.ImagenUrl,
                        Stock = currentProduct.Stock,
                        Categoria = currentProduct.Categoria,
                        Origen = currentProduct.Origen,
                        UnidadDeMedida = currentProduct.UnidadDeMedida,
                        EsOrganicoCertificado = currentProduct.EsOrganicoCertificado,
                        Temporada = currentProduct.Temporada,
                        Variaciones = currentProduct.Variaciones.Select(v => new VariacionInputModel
                        {
                            VariacionId = v.VariacionId,
                            NombreVariacion = v.NombreVariacion,
                            ValorVariacion = v.ValorVariacion,
                            PrecioAdicional = v.PrecioAdicional
                        }).ToList()
                    };
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error al cargar el producto para edición.";
            Logger.LogError(ex, "Error loading product for edit with ID {ProductoId}", ProductoId);
            productInput = null;
        }
        finally
        {
            isLoading = false;
        }
    }


    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        errorMessage = null;
        successMessage = null;

        selectedImageFile = e.File;

        if (selectedImageFile.Size > 5 * 1024 * 1024)
        {
            errorMessage = "El archivo de imagen es demasiado grande (máx 5MB).";
            selectedImageFile = null;
            return;
        }

        if (!selectedImageFile.ContentType.StartsWith("image/"))
        {
            errorMessage = "Solo se permiten archivos de imagen.";
            selectedImageFile = null;
            return;
        }
    }


    private void AddVariation()
    {
        if (productInput != null)
        {
            productInput.Variaciones.Add(new VariacionInputModel());
        }
    }


    private void RemoveVariation(VariacionInputModel variation)
    {
        if (productInput != null)
        {
            productInput.Variaciones.Remove(variation);

            if (variation.VariacionId != 0)
            {
                var dbVariation = DbContext.ProductoVariaciones.Local.FirstOrDefault(v => v.VariacionId == variation.VariacionId);
                if (dbVariation == null)
                {
                    dbVariation = DbContext.ProductoVariaciones.FirstOrDefault(v => v.VariacionId == variation.VariacionId);
                }

                if (dbVariation != null)
                {
                    DbContext.ProductoVariaciones.Remove(dbVariation);
                }
            }
        }
    }


    private async Task HandleValidSubmit()
    {
        successMessage = null;
        errorMessage = null;

        if (productInput == null || currentProduct == null)
        {
            errorMessage = "Error interno: los datos del producto no están disponibles.";
            return;
        }

        try
        {
            if (selectedImageFile != null)
            {
                var uploadsFolder = Path.Combine(WebHostEnvironment.WebRootPath, "images", "productos");
                if (!Directory.Exists(uploadsFolder))
                {
                    Directory.CreateDirectory(uploadsFolder);
                }

                if (!string.IsNullOrEmpty(currentProduct.ImagenUrl) && currentProduct.ImagenUrl.StartsWith("/images/productos/"))
                {
                    var oldFilePath = Path.Combine(WebHostEnvironment.WebRootPath, currentProduct.ImagenUrl.TrimStart('/'));
                    if (System.IO.File.Exists(oldFilePath))
                    {
                        System.IO.File.Delete(oldFilePath);
                        Logger.LogInformation("Imagen anterior eliminada: {OldFilePath}", oldFilePath);
                    }
                }

                var uniqueFileName = Guid.NewGuid().ToString() + "_" + selectedImageFile.Name;
                var filePath = Path.Combine(uploadsFolder, uniqueFileName);

                await using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await selectedImageFile.OpenReadStream(selectedImageFile.Size).CopyToAsync(stream);
                }

                currentProduct.ImagenUrl = $"/images/productos/{uniqueFileName}";
                Logger.LogInformation("Nueva imagen guardada: {NewImagePath}", currentProduct.ImagenUrl);
            }

            else if (string.IsNullOrEmpty(currentProduct.ImagenUrl))
            {
                currentProduct.ImagenUrl = "/images/productos/default_placeholder.png";
            }


            currentProduct.Nombre = productInput.Nombre;
            currentProduct.Descripcion = productInput.Descripcion;
            currentProduct.Precio = productInput.Precio;
            currentProduct.Stock = productInput.Stock;
            currentProduct.Categoria = productInput.Categoria;
            currentProduct.Origen = productInput.Origen;
            currentProduct.UnidadDeMedida = productInput.UnidadDeMedida;
            currentProduct.EsOrganicoCertificado = productInput.EsOrganicoCertificado;
            currentProduct.Temporada = productInput.Temporada;


            var variationsToRemove = currentProduct.Variaciones
                .Where(v => !productInput.Variaciones.Any(iv => iv.VariacionId == v.VariacionId && iv.VariacionId != 0))
                .ToList();
            foreach (var variation in variationsToRemove)
            {
                if (variation.VariacionId != 0)
                {
                    var dbVariation = DbContext.ProductoVariaciones.Local.FirstOrDefault(v => v.VariacionId == variation.VariacionId);
                    if (dbVariation == null)
                    {
                        dbVariation = await DbContext.ProductoVariaciones.FirstOrDefaultAsync(v => v.VariacionId == variation.VariacionId);
                    }
                    if (dbVariation != null)
                    {
                        DbContext.ProductoVariaciones.Remove(dbVariation);
                    }
                }
            }


            foreach (var inputVariation in productInput.Variaciones)
            {
                if (string.IsNullOrWhiteSpace(inputVariation.NombreVariacion) ||
                    string.IsNullOrWhiteSpace(inputVariation.ValorVariacion))
                {
                    errorMessage = "Todas las variaciones deben tener Nombre y Valor.";
                    return;
                }

                if (inputVariation.VariacionId != 0)
                {
                    var existingVariation = currentProduct.Variaciones.FirstOrDefault(v => v.VariacionId == inputVariation.VariacionId);
                    if (existingVariation != null)
                    {
                        existingVariation.NombreVariacion = inputVariation.NombreVariacion;
                        existingVariation.ValorVariacion = inputVariation.ValorVariacion;
                        existingVariation.PrecioAdicional = inputVariation.PrecioAdicional;
                    }
                    else
                    {
                        currentProduct.Variaciones.Add(new ProductoVariacion
                            {
                                ProductoId = currentProduct.ProductoId,
                                NombreVariacion = inputVariation.NombreVariacion,
                                ValorVariacion = inputVariation.ValorVariacion,
                                PrecioAdicional = inputVariation.PrecioAdicional
                            });
                    }
                }
                else
                {
                    currentProduct.Variaciones.Add(new ProductoVariacion
                        {
                            ProductoId = currentProduct.ProductoId,
                            NombreVariacion = inputVariation.NombreVariacion,
                            ValorVariacion = inputVariation.ValorVariacion,
                            PrecioAdicional = inputVariation.PrecioAdicional
                        });
                }
            }


            await DbContext.SaveChangesAsync();

            successMessage = $"Producto '{currentProduct.Nombre}' actualizado exitosamente.";
            Logger.LogInformation("Producto actualizado: {ProductName} (ID: {ProductId})", currentProduct.Nombre, currentProduct.ProductoId);


            selectedImageFile = null;

            await OnInitializedAsync();

            StateHasChanged();
        }
        catch (DbUpdateException ex)
        {
            errorMessage = "Error al actualizar el producto en la base de datos. Verifica los datos e intenta de nuevo.";
            Logger.LogError(ex, "Error al actualizar el producto en la base de datos: {ExMessage}", ex.Message);
        }
        catch (IOException ex)
        {
            errorMessage = "Error al manejar el archivo de imagen. Verifica los permisos del servidor.";
            Logger.LogError(ex, "Error de E/S al actualizar la imagen: {ExMessage}", ex.Message);
        }
        catch (Exception ex)
        {
            errorMessage = "Error inesperado al actualizar el producto.";
            Logger.LogError(ex, "Error inesperado al actualizar el producto: {ExMessage}", ex.Message);
        }
    }

    private async Task HandleDeleteProduct()
    {
        errorMessage = null;
        successMessage = null;

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Estás seguro de que quieres eliminar el producto '{currentProduct.Nombre}'?");

        if (confirmed && currentProduct != null)
        {
            try
            {
                // Eliminar variaciones asociadas
                if (currentProduct.Variaciones != null)
                {
                    DbContext.ProductoVariaciones.RemoveRange(currentProduct.Variaciones);
                }

                // Eliminar el producto de la base de datos
                DbContext.Productos.Remove(currentProduct);
                await DbContext.SaveChangesAsync();

                // Eliminar el archivo de imagen si no es la imagen por defecto
                if (!string.IsNullOrEmpty(currentProduct.ImagenUrl) && !currentProduct.ImagenUrl.EndsWith("default_placeholder.png"))
                {
                    var imagePath = Path.Combine(WebHostEnvironment.WebRootPath, currentProduct.ImagenUrl.TrimStart('/'));
                    if (System.IO.File.Exists(imagePath))
                    {
                        System.IO.File.Delete(imagePath);
                        Logger.LogInformation("Imagen del producto eliminada: {ImagePath}", imagePath);
                    }
                }

                successMessage = "Producto eliminado exitosamente.";
                Logger.LogInformation("Producto eliminado: {ProductName} (ID: {ProductId})", currentProduct.Nombre, currentProduct.ProductoId);

                // Redirigir al usuario a la página de la lista de productos
                NavigationManager.NavigateTo("/productos");
            }
            catch (Exception ex)
            {
                errorMessage = "Error al eliminar el producto. Inténtalo de nuevo.";
                Logger.LogError(ex, "Error al eliminar el producto con ID {ProductId}", currentProduct.ProductoId);
            }
        }
    }
}