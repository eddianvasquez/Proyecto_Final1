@page "/admin/consultas"
@using Proyecto_Final1.Models.Usuarios
@using Proyecto_Final1.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject ApplicationDbContext Context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

@attribute [Authorize(Roles = "Admin")] 

<PageTitle>Administrar Consultas</PageTitle>

<main class="container mx-auto px-4 py-8">
    <h1 class="text-4xl md:text-5xl font-bold text-gray-800 mb-8 text-center">Administrar Consultas</h1>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-6 rounded-md shadow-sm" role="alert">
            <p class="font-bold">¡Éxito!</p>
            <p>@successMessage</p>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded-md shadow-sm" role="alert">
            <p class="font-bold">Error:</p>
            <p>@errorMessage</p>
        </div>
    }

    <div class="bg-white p-6 rounded-lg shadow-lg mb-8">
        <h2 class="text-2xl font-semibold text-gray-800 mb-4">Filtrar Consultas por Fecha</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
            <div>
                <label for="filterStartDate" class="block text-sm font-medium text-gray-700">Fecha de Inicio:</label>
                <input type="date" id="filterStartDate" @bind="filterDateStart" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500" />
            </div>
            <div>
                <label for="filterEndDate" class="block text-sm font-medium text-gray-700">Fecha Fin:</label>
                <input type="date" id="filterEndDate" @bind="filterDateEnd" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500" />
            </div>
            <div class="flex space-x-2 mt-4 md:mt-0">
                <button @onclick="ApplyFilter" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md transition duration-150 ease-in-out transform hover:scale-105 flex-grow">
                    <i class="fas fa-filter mr-2"></i>Aplicar Filtro
                </button>
                <button @onclick="ClearFilter" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-md transition duration-150 ease-in-out transform hover:scale-105 flex-grow">
                    <i class="fas fa-times mr-2"></i>Limpiar Filtro
                </button>
            </div>
        </div>
    </div>

    @if (consultas == null)
    {
        <p class="text-center text-gray-600">Cargando consultas...</p>
    }
    else if (!consultas.Any())
    {
        <p class="text-center text-gray-600">No hay consultas disponibles.</p>
    }
    else
    {
        <div class="overflow-x-auto bg-white rounded-lg shadow-lg">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Usuario (ID)</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Asunto</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Mensaje</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha de Envío</th>
                        <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var consulta in consultas)
                    {
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@consulta.ConsultaId</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                @(consulta.Usuario?.UserName ?? "Usuario Desconocido") (@consulta.UsuarioId)
                            </td>
                            <td class="px-6 py-4 text-sm text-gray-900">@consulta.Asunto</td>
                            <td class="px-6 py-4 text-sm text-gray-900 truncate max-w-xs" title="@consulta.Mensaje">@consulta.Mensaje</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@consulta.FechaEnvio.ToString("dd/MM/yyyy HH:mm")</td>
                            <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                                <button @onclick="(() => ShowEditForm(consulta))" class="text-indigo-600 hover:text-indigo-900 mr-4">
                                    <i class="fas fa-edit"></i> Editar
                                </button>
                                <button @onclick="(() => ConfirmDelete(consulta.ConsultaId))" class="text-red-600 hover:text-red-900">
                                    <i class="fas fa-trash-alt"></i> Eliminar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</main>

@if (showEditModal)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-75 flex items-center justify-center z-50 p-4">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-lg p-6">
            <h3 class="text-2xl font-semibold text-gray-800 mb-6 text-center">Editar Consulta</h3>
            <EditForm Model="@consultaToEdit" OnValidSubmit="@SaveConsulta">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-4">
                    <label for="editAsunto" class="block text-sm font-medium text-gray-700">Asunto:</label>
                    <InputText id="editAsunto" @bind-Value="consultaToEdit.Asunto" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500" />
                </div>
                <div class="mb-6">
                    <label for="editMensaje" class="block text-sm font-medium text-gray-700">Mensaje:</label>
                    <InputTextArea id="editMensaje" @bind-Value="consultaToEdit.Mensaje" rows="6" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500" />
                </div>

                <div class="flex justify-end space-x-4">
                    <button type="button" @onclick="CloseEditModal" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-md transition duration-150 ease-in-out">
                        Cancelar
                    </button>
                    <button type="submit" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md transition duration-150 ease-in-out">
                        Guardar Cambios
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private List<Consulta> consultas;
    private Consulta consultaToEdit;
    private bool showEditModal = false;
    private DateTime? filterDateStart;
    private DateTime? filterDateEnd;
    private string successMessage;
    private string errorMessage;

    // Se carga al inicializar el componente
    protected override async Task OnInitializedAsync()
    {
        await LoadConsultas();
    }

    // Carga las consultas desde la base de datos, aplicando filtros
    private async Task LoadConsultas()
    {
        try
        {
            IQueryable<Consulta> query = Context.Consultas.Include(c => c.Usuario).AsQueryable();

            if (filterDateStart.HasValue)
            {
                // Asegúrate de que la hora de inicio sea el principio del día
                query = query.Where(c => c.FechaEnvio.Date >= filterDateStart.Value.Date);
            }

            if (filterDateEnd.HasValue)
            {
                // Asegúrate de que la hora de fin sea el final del día
                query = query.Where(c => c.FechaEnvio.Date <= filterDateEnd.Value.Date);
            }

            consultas = await query.OrderByDescending(c => c.FechaEnvio).ToListAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar las consultas: {ex.Message}";
            Console.WriteLine($"Error al cargar las consultas: {ex.Message}");
        }
    }

    // Muestra el formulario de edición en un modal
    private void ShowEditForm(Consulta consulta)
    {
        consultaToEdit = consulta; // Se usa una referencia directa para editar en el modal
        showEditModal = true;
        successMessage = string.Empty; // Limpia mensajes anteriores
        errorMessage = string.Empty;
    }

    // Guarda los cambios en una consulta existente
    private async Task SaveConsulta()
    {
        if (consultaToEdit == null) return;

        try
        {
            Context.Consultas.Update(consultaToEdit); // Marca la entidad como modificada
            await Context.SaveChangesAsync();
            await LoadConsultas(); // Recarga la lista para reflejar los cambios
            successMessage = "Consulta actualizada exitosamente.";
            CloseEditModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar la consulta: {ex.Message}";
            Console.WriteLine($"Error al guardar la consulta: {ex.Message}");
        }
    }

    // Cierra el modal de edición
    private void CloseEditModal()
    {
        showEditModal = false;
        consultaToEdit = null;
    }

    // Confirma y elimina una consulta
    private async Task ConfirmDelete(int consultaId)
    {
        bool confirmed = await Task.FromResult(
            new ConfirmDialog("Confirmar Eliminación", "¿Estás seguro de que quieres eliminar esta consulta?").Show()
        );

        if (confirmed)
        {
            await DeleteConsulta(consultaId);
        }
    }

    private async Task DeleteConsulta(int consultaId)
    {
        try
        {
            var consulta = await Context.Consultas.FindAsync(consultaId);
            if (consulta != null)
            {
                Context.Consultas.Remove(consulta); // Marca la entidad para eliminación
                await Context.SaveChangesAsync();
                await LoadConsultas(); // Recarga la lista
                successMessage = "Consulta eliminada exitosamente.";
            }
            else
            {
                errorMessage = "Consulta no encontrada.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al eliminar la consulta: {ex.Message}";
            Console.WriteLine($"Error al eliminar la consulta: {ex.Message}");
        }
    }

    // Aplica los filtros de fecha y recarga las consultas
    private async Task ApplyFilter()
    {
        successMessage = string.Empty;
        errorMessage = string.Empty;
        await LoadConsultas();
    }

    // Limpia los filtros de fecha y recarga las consultas
    private async Task ClearFilter()
    {
        filterDateStart = null;
        filterDateEnd = null;
        successMessage = string.Empty;
        errorMessage = string.Empty;
        await LoadConsultas();
    }

    // Clase auxiliar para un diálogo de confirmación simple (simulado aquí)
    // En una aplicación real, usarías un componente de diálogo de Blazor.
    private class ConfirmDialog
    {
        private string title;
        private string message;

        public ConfirmDialog(string title, string message)
        {
            this.title = title;
            this.message = message;
        }

        public bool Show()
        {
            // En una aplicación real, esto mostraría un modal de confirmación al usuario.
            // Para este ejemplo, simulamos una confirmación true/false.
            // Esto es solo un placeholder. Debes implementar un componente modal real.
            return true; // Asumimos 'Sí' para la demostración
        }
    }
}
