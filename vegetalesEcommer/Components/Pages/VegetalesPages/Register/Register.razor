@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Proyecto_Final1.Data
@using Proyecto_Final1.Components.Account
@using System.Text
@using Microsoft.JSInterop

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IJSRuntime JSRuntime

<PageTitle>Registrarse - Mercado Orgánico</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-green-50 to-green-100 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
       
        <div class="text-center">
            <div class="flex justify-center items-center space-x-2 mb-4">
                <i class="fas fa-leaf text-4xl text-green-600"></i>
                <span class="text-2xl font-bold text-green-700">Mercado Orgánico</span>
            </div>
            <h2 class="text-3xl font-extrabold text-gray-900">Crear una Cuenta</h2>
            <p class="mt-2 text-sm text-gray-600">
                Regístrate para comenzar a usar la plataforma
            </p>
        </div>

        
        <div class="bg-white rounded-lg shadow-lg p-8">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md text-sm mb-4" role="alert">
                    @errorMessage
                </div>
            }
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-md text-sm mb-4" role="alert">
                    @successMessage
                </div>
            }

            <EditForm Model="Input" method="post" OnValidSubmit="RegisterUser" FormName="register" class="space-y-6">
                <DataAnnotationsValidator />
                <ValidationSummary class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md text-sm" role="alert" />

                
                <div class="space-y-2">
                    <label for="Input.Nombre" class="block text-sm font-medium text-gray-700">
                        <i class="fas fa-user text-green-600 mr-2"></i>Nombre
                    </label>
                    <InputText @bind-Value="Input.Nombre"
                               id="Input.Nombre"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition"
                               aria-required="true"
                               placeholder="Tu nombre" />
                    <ValidationMessage For="() => Input.Nombre" class="text-red-600 text-sm" />
                </div>

                
                <div class="space-y-2">
                    <label for="Input.Apellido" class="block text-sm font-medium text-gray-700">
                        <i class="fas fa-user text-green-600 mr-2"></i>Apellido
                    </label>
                    <InputText @bind-Value="Input.Apellido"
                               id="Input.Apellido"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition"
                               aria-required="true"
                               placeholder="Tu apellido" />
                    <ValidationMessage For="() => Input.Apellido" class="text-red-600 text-sm" />
                </div>

                
                <div class="space-y-2">
                    <label for="Input.Email" class="block text-sm font-medium text-gray-700">
                        <i class="fas fa-envelope text-green-600 mr-2"></i>Correo Electrónico
                    </label>
                    <InputText @bind-Value="Input.Email"
                               id="Input.Email"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition"
                               autocomplete="username"
                               aria-required="true"
                               placeholder="nombre@ejemplo.com" />
                    <ValidationMessage For="() => Input.Email" class="text-red-600 text-sm" />
                </div>

                
                <div class="space-y-2">
                    <label for="Input.Password" class="block text-sm font-medium text-gray-700">
                        <i class="fas fa-lock text-green-600 mr-2"></i>Contraseña
                    </label>
                    <InputText type="password"
                               @bind-Value="Input.Password"
                               id="Input.Password"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition"
                               autocomplete="new-password"
                               aria-required="true"
                               placeholder="••••••••" />
                    <ValidationMessage For="() => Input.Password" class="text-red-600 text-sm" />
                </div>

                
                <div class="space-y-2">
                    <label for="Input.ConfirmPassword" class="block text-sm font-medium text-gray-700">
                        <i class="fas fa-lock text-green-600 mr-2"></i>Confirmar Contraseña
                    </label>
                    <InputText type="password"
                               @bind-Value="Input.ConfirmPassword"
                               id="Input.ConfirmPassword"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 transition"
                               autocomplete="new-password"
                               aria-required="true"
                               placeholder="••••••••" />
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-red-600 text-sm" />
                </div>

                
                <div>
                    <button type="submit"
                            class="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition duration-150 ease-in-out transform hover:scale-105">
                        <span class="absolute left-0 inset-y-0 flex items-center pl-3">
                            <i class="fas fa-user-plus text-green-500 group-hover:text-green-400"></i>
                        </span>
                        Registrarse
                    </button>
                </div>

                
                <div class="text-center space-y-2">
                    <div>
                        <a href="Account/Login"
                           class="text-sm text-green-600 hover:text-green-500 hover:underline transition">
                            <i class="fas fa-sign-in-alt mr-1"></i>¿Ya tienes una cuenta? Inicia Sesión
                        </a>
                    </div>
                    <div>
                        <a href="Account/ForgotPassword"
                           class="text-sm text-green-600 hover:text-green-500 hover:underline transition">
                            <i class="fas fa-question-circle mr-1"></i>¿Olvidaste tu contraseña?
                        </a>
                    </div>
                    <div>
                        <a href="Account/ResendEmailConfirmation"
                           class="text-sm text-green-600 hover:text-green-500 hover:underline transition">
                            <i class="fas fa-envelope mr-1"></i>Reenviar confirmación de correo
                        </a>
                    </div>
                </div>
            </EditForm>
        </div>

        
        <div class="text-center">
            <a href="/"
               class="inline-flex items-center text-sm text-gray-600 hover:text-green-600 transition">
                <i class="fas fa-arrow-left mr-2"></i>
                Volver al inicio
            </a>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;
    private string? successMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task RegisterUser()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var user = Activator.CreateInstance<ApplicationUser>();

            user.Nombre = Input.Nombre;
            user.Apellido = Input.Apellido;
            user.UserName = Input.Email; 

            await UserManager.SetEmailAsync(user, Input.Email);

            var result = await UserManager.CreateAsync(user, Input.Password);

            if (result.Succeeded)
            {
                Logger.LogInformation("User created a new account with password.");

                
                if (await UserManager.IsInRoleAsync(user, "Cliente") == false)
                {
                    await UserManager.AddToRoleAsync(user, "Cliente");
                    Logger.LogInformation($"User {user.Email} assigned to role 'Cliente'.");
                }

                successMessage = "¡Tu cuenta ha sido creada con éxito! Puedes registrar otro usuario.";
                
                Input = new();
                StateHasChanged(); 
            }
            else
            {
                errorMessage = string.Join(" ", result.Errors.Select(e => e.Description));
                Logger.LogError("Error creating user: {Errors}", errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ocurrió un error inesperado. Por favor, inténtalo de nuevo. Detalle: {ex.Message}";
            Logger.LogError(ex, "Error during user registration.");
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "El nombre es obligatorio.")]
        [StringLength(100, ErrorMessage = "El nombre no puede exceder los 100 caracteres.")]
        [Display(Name = "Nombre")]
        public string Nombre { get; set; } = "";

        [Required(ErrorMessage = "El apellido es obligatorio.")]
        [StringLength(100, ErrorMessage = "El apellido no puede exceder los 100 caracteres.")]
        [Display(Name = "Apellido")]
        public string Apellido { get; set; } = "";

        [Required(ErrorMessage = "El correo electrónico es requerido")]
        [EmailAddress(ErrorMessage = "Formato de correo electrónico inválido")]
        [Display(Name = "Correo Electrónico")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es requerida")]
        [StringLength(100, ErrorMessage = "La {0} debe tener al menos {2} y un máximo de {1} caracteres de longitud.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Contraseña")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirmar Contraseña")]
        [Compare("Password", ErrorMessage = "La contraseña y la confirmación no coinciden.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
